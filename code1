import pyglet
from pyglet import shapes
from pyglet.window import mouse
from pyglet.window import key

window = pyglet.window.Window(1100, 640)
batch = pyglet.graphics.Batch()
batch2 = pyglet.graphics.Batch()
batch3 = pyglet.graphics.Batch()

plugboard = pyglet.window.Window(width=1100, height=500, visible=False)
loc = window.get_location()
size= window.get_size()
plugboard.set_location(loc[0],loc[1]+80)
plugboard.set_size(size[0], size[1]-80)








#Dictionaries to convert Pyglet key press symbol to alphabet
abc_symbol={'A':97, 'B':98, 'C':99, 'D':100 ,'E':101, 'F':102, 'G':103, 'H':104, 'I':105, 'J':106, 'K':107, 'L':108, 'M':109, \
             'N':110, 'O':111, 'P':112, 'Q':113, 'R':114, 'S':115, 'T':116, 'U':117, 'V':118, 'W':119, 'X':120, 'Y':121, 'Z':122}
symbol_abc={97: 'A', 98: 'B', 99: 'C', 100: 'D' ,101: 'E', 102: 'F', 103: 'G', 104: 'H', 105: 'I', 106: 'J', 107:'K', 108: 'L', 109: 'M', \
             110: 'N', 111: 'O', 112: 'P', 113: 'Q', 114: 'R', 115: 'S', 116: 'T', 117: 'U', 118: 'V', 119: 'W', 120: 'X', 121: 'Y', 122: 'Z'}

#Alphabet used for indexing
abc    = ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z")

#Rotor
I      = ('E', 'K', 'M', 'F', 'L', 'G', 'D', 'Q', 'V', 'Z', 'N', 'T', 'O', 'W', 'Y', 'H', 'X', 'U', 'S', 'P', 'A', 'I', 'B', 'R', 'C', 'J')
II     = ('A', 'J', 'D', 'K', 'S', 'I', 'R', 'U', 'X', 'B', 'L', 'H', 'W', 'T', 'M', 'C', 'Q', 'G', 'Z', 'N', 'P', 'Y', 'F', 'V', 'O', 'E')
III    = ('B', 'D', 'F', 'H', 'J', 'L', 'C', 'P', 'R', 'T', 'X', 'V', 'Z', 'N', 'Y', 'E', 'I', 'W', 'G', 'A', 'K', 'M', 'U', 'S', 'Q', 'O')
IV     = ('E', 'S', 'O', 'V', 'P', 'Z', 'J', 'A', 'Y', 'Q', 'U', 'I', 'R', 'H', 'X', 'L', 'N', 'F', 'T', 'G', 'K', 'D', 'C', 'M', 'W', 'B')
V      = ('V', 'Z', 'B', 'R', 'G', 'I', 'T', 'Y', 'U', 'P', 'S', 'D', 'N', 'H', 'L', 'X', 'A', 'W', 'M', 'J', 'Q', 'O', 'F', 'E', 'C', 'K')
VI     = ('J', 'P', 'G', 'V', 'O', 'U', 'M', 'F', 'Y', 'Q', 'B', 'E', 'N', 'H', 'Z', 'R', 'D', 'K', 'A', 'S', 'X', 'L', 'I', 'C', 'T', 'W')
VII    = ('N', 'Z', 'J', 'H', 'G', 'R', 'C', 'X', 'M', 'Y', 'S', 'W', 'B', 'O', 'U', 'F', 'A', 'I', 'V', 'L', 'P', 'E', 'K', 'Q', 'D', 'T')
VIII   = ('F', 'K', 'Q', 'H', 'T', 'L', 'X', 'O', 'C', 'B', 'J', 'S', 'P', 'D', 'Z', 'R', 'A', 'M', 'E', 'W', 'N', 'I', 'U', 'Y', 'G', 'V')
Beta   = ('L', 'E', 'Y', 'J', 'V', 'C', 'N', 'I', 'X', 'W', 'P', 'B', 'Q', 'M', 'D', 'R', 'T', 'A', 'K', 'Z', 'G', 'F', 'U', 'H', 'O', 'S')
Gamma  = ('F', 'S', 'O', 'K', 'A', 'N', 'U', 'E', 'R', 'H', 'M', 'B', 'T', 'I', 'Y', 'C', 'W', 'L', 'Q', 'P', 'Z', 'X', 'V', 'G', 'J', 'D')

#Reflector
A      = ('E', 'J', 'M', 'Z', 'A', 'L', 'Y', 'X', 'V', 'B', 'W', 'F', 'C', 'R', 'Q', 'U', 'O', 'N', 'T', 'S', 'P', 'I', 'K', 'H', 'G', 'D')
B      = ('Y', 'R', 'U', 'H', 'Q', 'S', 'L', 'D', 'P', 'X', 'N', 'G', 'O', 'K', 'M', 'I', 'E', 'B', 'F', 'Z', 'C', 'W', 'V', 'J', 'A', 'T')
C      = ('F', 'V', 'P', 'J', 'I', 'A', 'O', 'Y', 'E', 'D', 'R', 'Z', 'X', 'W', 'G', 'C', 'T', 'K', 'U', 'Q', 'S', 'B', 'N', 'M', 'H', 'L')
B_Thin = ('E', 'N', 'K', 'Q', 'A', 'U', 'Y', 'W', 'J', 'I', 'C', 'O', 'P', 'B', 'L', 'M', 'D', 'X', 'Z', 'V', 'F', 'T', 'H', 'R', 'G', 'S')
C_Thin = ('R', 'D', 'O', 'B', 'J', 'N', 'T', 'K', 'V', 'E', 'H', 'M', 'L', 'F', 'C', 'W', 'Z', 'A', 'X', 'G', 'Y', 'I', 'P', 'S', 'U', 'Q')


Rotors = [I, II, III]

Rotor_1 = Rotors[0]
Rotor_2 = Rotors[1]
Rotor_3 = Rotors[2]
#Rotor_4 = Rotors[3]
Reflector = A



class Key():
    def __init__(self, x, y, letter, visible):
        self.x = x
        self.y = y
        self.letter=str(letter)
        self.visible = visible

    def shape(self):
        return shapes.Arc(self.x,self.y,radius=40, color=(255,255,255) , batch=batch), \
               pyglet.text.Label(self.letter, font_name='Times New Roman', font_size=32, x=self.x, y=self.y+3, anchor_x="center", anchor_y="center", batch=batch)
    
    def lamp(self):
        return shapes.Circle(self.x,self.y,radius=40, color=(255,255,0) ,  batch=batch)



TopRow = 350
QArc = Key.shape(Key(100,TopRow, 'Q', True))
WArc = Key.shape(Key(200,TopRow, 'W', True))
EArc = Key.shape(Key(300,TopRow, 'E', True))
RArc = Key.shape(Key(400,TopRow, 'R', True))
TArc = Key.shape(Key(500,TopRow, 'T', True))
YArc = Key.shape(Key(600,TopRow, 'Y', True))
UArc = Key.shape(Key(700,TopRow, 'U', True))
IArc = Key.shape(Key(800,TopRow, 'I', True))
OArc = Key.shape(Key(900,TopRow, 'O', True))
PArc = Key.shape(Key(1000,TopRow, 'P', True))

QCircle = Key.lamp(Key(100, TopRow, 'Q', False))
QCircle.visible = False
WCircle = Key.lamp(Key(200, TopRow, 'W', False))
WCircle.visible = False
ECircle = Key.lamp(Key(300, TopRow, 'E', False))
ECircle.visible = False
RCircle = Key.lamp(Key(400, TopRow, 'R', False))
RCircle.visible = False
TCircle = Key.lamp(Key(500, TopRow, 'T', False))
TCircle.visible = False
YCircle = Key.lamp(Key(600, TopRow, 'Y', False))
YCircle.visible = False
UCircle = Key.lamp(Key(700, TopRow, 'U', False))
UCircle.visible = False
ICircle = Key.lamp(Key(800, TopRow, 'I', False))
ICircle.visible = False
OCircle = Key.lamp(Key(900, TopRow, 'O', False))
OCircle.visible = False
PCircle = Key.lamp(Key(1000, TopRow, 'P', False))
PCircle.visible = False

####
MidRow = 250
AArc = Key.shape(Key(150,MidRow, 'A', True))
SArc = Key.shape(Key(250,MidRow, 'S', True))
DArc = Key.shape(Key(350,MidRow, 'D', True))
FArc = Key.shape(Key(450,MidRow, 'F', True))
GArc = Key.shape(Key(550,MidRow, 'G', True))
HArc = Key.shape(Key(650,MidRow, 'H', True))
JArc = Key.shape(Key(750,MidRow, 'J', True))
KArc = Key.shape(Key(850,MidRow, 'K', True))
LArc = Key.shape(Key(950,MidRow, 'L', True))

ACircle = Key.lamp(Key(150, MidRow, 'A', False))
ACircle.visible = False
SCircle = Key.lamp(Key(250, MidRow, 'S', False))
SCircle.visible = False
DCircle = Key.lamp(Key(350, MidRow, 'D', False))
DCircle.visible = False
FCircle = Key.lamp(Key(450, MidRow, 'F', False))
FCircle.visible = False
GCircle = Key.lamp(Key(550, MidRow, 'G', False))
GCircle.visible = False
HCircle = Key.lamp(Key(650, MidRow, 'H', False))
HCircle.visible = False
JCircle = Key.lamp(Key(750, MidRow, 'J', False))
JCircle.visible = False
KCircle = Key.lamp(Key(850, MidRow, 'K', False))
KCircle.visible = False
LCircle = Key.lamp(Key(950, MidRow, 'L', False))
LCircle.visible = False


####
BotRow = 150
ZArc = Key.shape(Key(250,BotRow, 'Z', True))
XArc = Key.shape(Key(350,BotRow, 'X', True))
CArc = Key.shape(Key(450,BotRow, 'C', True))
VArc = Key.shape(Key(550,BotRow, 'V', True))
BArc = Key.shape(Key(650,BotRow, 'B', True))
NArc = Key.shape(Key(750,BotRow, 'N', True))
MArc = Key.shape(Key(850,BotRow, 'M', True))

ZCircle = Key.lamp(Key(250, BotRow, 'Z', False))
ZCircle.visible = False
XCircle = Key.lamp(Key(350, BotRow, 'X', False))
XCircle.visible = False
CCircle = Key.lamp(Key(450, BotRow, 'C', False))
CCircle.visible = False
VCircle = Key.lamp(Key(550, BotRow, 'V', False))
VCircle.visible = False
BCircle = Key.lamp(Key(650, BotRow, 'B', False))
BCircle.visible = False
NCircle = Key.lamp(Key(750, BotRow, 'N', False))
NCircle.visible = False
MCircle = Key.lamp(Key(850, BotRow, 'M', False))
MCircle.visible = False



Plugboard = pyglet.text.Label('Plugboard', font_name='Times New Roman', font_size=38,
                              x=550, y=40, anchor_x="center", anchor_y="center", batch=batch)


class indicator():
    def __init__(self, x, y, letter):
        self.x = x
        self.y = y
        self.letter = str(letter)

    def window(self):
        return shapes.Rectangle(self.x, self.y, 60, 60, color=(255,255,255), batch=batch), \
               pyglet.text.Label(self.letter, font_name='Times New Roman', font_size=32, x=self.x+30, y=self.y+35, anchor_x="center", color=(0,0,0,255), anchor_y="center", batch=batch)
               
R1 = indicator.window(indicator(250, 500, "Q"))
R2 = indicator.window(indicator(350, 500, "Q"))
R3 = indicator.window(indicator(450, 500, "Q"))
#R4 = indicator.window(indicator(550, 500, "Q"))


  

class PBW(pyglet.window.Window):
    pass



            
    
class PB():
    def __init__(self, x, y, letter):
        self.x = x
        self.y = y
        self.letter=str(letter)

    def shape(self):
        return shapes.Circle(self.x,self.y,radius=15, color=(255,255,255) , batch=batch2), \
               pyglet.text.Label(self.letter, font_name='Times New Roman', font_size=24, x=self.x, y=self.y-37, bold=False, anchor_x="center", anchor_y="center", batch=batch2)


TopRowPB = 350
QPBCircle = PB.shape(PB(100,TopRowPB, 'Q'))
WPBCircle = PB.shape(PB(200,TopRowPB, 'W'))
EPBCircle = PB.shape(PB(300,TopRowPB, 'E'))
RPBCircle = PB.shape(PB(400,TopRowPB, 'R'))
TPBCircle = PB.shape(PB(500,TopRowPB, 'T'))
YPBCircle = PB.shape(PB(600,TopRowPB, 'Y'))
UPBCircle = PB.shape(PB(700,TopRowPB, 'U'))
IPBCircle = PB.shape(PB(800,TopRowPB, 'I'))
OPBCircle = PB.shape(PB(900,TopRowPB, 'O'))
PPBCircle = PB.shape(PB(1000,TopRowPB, 'P'))

MidRowPB = 250
APBCircle = PB.shape(PB(150,MidRowPB, 'A'))
SPBCircle = PB.shape(PB(250,MidRowPB, 'S'))
DPBCircle = PB.shape(PB(350,MidRowPB, 'D'))
FPBCircle = PB.shape(PB(450,MidRowPB, 'F'))
GPBCircle = PB.shape(PB(550,MidRowPB, 'G'))
HPBCircle = PB.shape(PB(650,MidRowPB, 'H'))
JPBCircle = PB.shape(PB(750,MidRowPB, 'J'))
KPBCircle = PB.shape(PB(850,MidRowPB, 'K'))
LPBCircle = PB.shape(PB(950,MidRowPB, 'L'))

BotRowPB = 150
ZPBCircle = PB.shape(PB(250,BotRowPB, 'Z'))
XPBCircle = PB.shape(PB(350,BotRowPB, 'X'))
CPBCircle = PB.shape(PB(450,BotRowPB, 'C'))
VPBCircle = PB.shape(PB(550,BotRowPB, 'V'))
BPBCircle = PB.shape(PB(650,BotRowPB, 'B'))
NPBCircle = PB.shape(PB(750,BotRowPB, 'N'))
MPBCircle = PB.shape(PB(850,BotRowPB, 'M'))

    


    




@window.event
def on_draw():
    window.clear()  
    plugboard.clear()
    #label.draw()
    batch.draw()    
    

@plugboard.event
def on_draw():
    plugboard.clear
    batch2.draw()

@window.event
def on_key_press(symbol, modifiers):
    letter = symbol_abc[symbol]
    index = abc.index(letter)
    print(letter, index)

    #letter = R4[index(letter)
    #index = R4.index(letter)

    index = Rotor_3.index(letter)
    letter = Rotor_3[index]
    
    print(letter, index, Rotor_3)


    index = Rotor_2.index(letter)
    letter = abc[index]
    letter = Rotor_2[index]
    
    print(letter, index, Rotor_2)

    index = Rotor_1.index(letter)
    letter = Rotor_1[index]
    
    print(letter, index, Rotor_1)

    index = Reflector.index(letter)                
    letter = Reflector[index]
    
    print(letter, index)
                    
    
    light = letter
    #print(symbol)

    
    if light == "Q":
        QCircle.visible= True
    if light == "W":
        WCircle.visible=True
    if light == "E":
        ECircle.visible=True
    if light == "R":
        RCircle.visible=True
    if light == "T":
        TCircle.visible=True
    if light == "Y":
        YCircle.visible=True
    if light == "U":
        UCircle.visible=True
    if light == "I":
        ICircle.visible=True
    if light == "O":
        OCircle.visible=True
    if light == "P":
        PCircle.visible=True

    if light == "A":
        ACircle.visible=True
    if light == "S":
        SCircle.visible=True
    if light == "D":
        DCircle.visible=True
    if light == "F":
        FCircle.visible=True
    if light == "G":
        GCircle.visible=True
    if light == "H":
        HCircle.visible=True
    if light == "J":
        JCircle.visible=True
    if light == "K":
        KCircle.visible=True
    if light == "L":
        LCircle.visible=True

    if light == "Z":
        ZCircle.visible=True
    if light == "X":
        XCircle.visible=True
    if light == "C":
        CCircle.visible=True
    if light == "V":
        VCircle.visible=True
    if light == "B":
        BCircle.visible=True
    if light == "N":
        NCircle.visible=True
    if light == "M":
        MCircle.visible=True

@window.event
def on_key_release(symbol, modifiers):
    QCircle.visible=False
    WCircle.visible=False
    ECircle.visible=False
    RCircle.visible=False
    TCircle.visible=False
    YCircle.visible=False
    UCircle.visible=False
    ICircle.visible=False
    OCircle.visible=False
    PCircle.visible=False

    ACircle.visible=False
    SCircle.visible=False
    DCircle.visible=False
    FCircle.visible=False
    GCircle.visible=False
    HCircle.visible=False
    JCircle.visible=False
    KCircle.visible=False
    LCircle.visible=False

    ZCircle.visible=False
    XCircle.visible=False
    CCircle.visible=False
    VCircle.visible=False
    BCircle.visible=False
    NCircle.visible=False
    MCircle.visible=False

    
##    if symbol == key.Q:
##        QCircle.visible=False
##    if symbol == key.W:
##        WCircle.visible=False
##    if symbol == key.E:
##        ECircle.visible=False
##    if symbol == key.R:
##        RCircle.visible=False

@window.event
def on_mouse_press(x, y, button, modifiers):
    pass

@plugboard.event
def on_mouse_leave(x,y):
    plugboard.set_visible(False)
    
    
@window.event
def on_mouse_press(x, y, button, modifiers):
    if y<90:
        #plugboard.set_visible(False)
        plugboard.clear()
        plugboard.switch_to()
        
        plugboard.set_visible(True)
        
    




    
pyglet.app.run()
